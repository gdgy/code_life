#study_openresty.conf

#lua_package_path "/mnt/hgfs/Share/mycode/openresty/src/?.lua;;"; 
#lua_code_cache off; 
server {
    listen 80;
    server_name fuck.com;
    default_type 'text/html'; 
    lua_need_request_body on; #全局打开读取request_body
    location = /use_var {
        content_by_lua_file /mnt/hgfs/Share/mycode/openresty/src/use_var.lua;
    }
    # 获取请求body数据
    location /request_body{
        content_by_lua_block{
            ngx.req.read_body()#部分接口打开读取req_body
            local data = ngx.req.get_body_data()
            ngx.say("hello", data)
        }
    }
    #获取uri参数
    location /request_uri{
        content_by_lua_block{
            local arg = ngx.req.get_uri_args()
            for k, v in pairs(arg) do
                ngx.say("[GET] key:", k, " v:", v)
            end
            
           ngx.req.read_body()
           local arg = ngx.req.get_post_args() --返回arg是table
           ngx.say('use get_post_args ', type(arg))
           for k,v in pairs(arg) do
               ngx.say("[POST] key:", k, " v:", v)
           end
           
           local arg = ngx.req.get_body_data()
           ngx.say('use get_body_data ', type(arg)) --返回arg是字符串
           ngx.say(arg)
        }
    }
    
    location /use_capture {
        #res.status, res.header, res.body, 和 res.truncated
        #  curl 'http://fuck.com/request_uri?a=1&b=2' -d '{"a"=5, "b"=4}'
        # curl 'http://fuck.com/request_uri?a=1&b=2' -d '{"a":5, "b":4}'
        content_by_lua_block {
            local res = ngx.location.capture("/request_uri", {method = ngx.HTTP_POST, args = {a = 1, b = '2&'},
                                                            body = 'c=3&d=4&'
                                                            })
            
            ngx.say('--------------')
            ngx.say(res.status)
            ngx.say('body: ', res.body, '||')
            ngx.say('Header:', type(res.header), '  len:', #res.header,table.concat(res.header, '|'))
            ngx.say('truncated:',res.truncated)
        }
        
    }
    
    location /echo_test{
        echo "succ";
    }
    location = /sub_request {
        content_by_lua_block {
            res = ngx.location.capture("/use_var");
        }
    }
    
    location = /sum {
    internal;
    content_by_lua_block {
        ngx.sleep(0.1)
        local args = ngx.req.get_uri_args()
        ngx.print(tonumber(args.a) + tonumber(args.b))
        ngx.req.read_body() --部分接口打开读取req_body
        local data = ngx.req.get_body_data()
        local post_args = ngx.req.get_post_args()
        ngx.say(table.concat(post_args, '|'))
        ngx.say("hello_str: ", data)
        }
    }

    location = /subduction {
        internal;
        content_by_lua_block {
            ngx.sleep(0.1)
            local args = ngx.req.get_uri_args()
            ngx.print(tonumber(args.a) - tonumber(args.b))
        }
    }

    location = /app/test_parallels {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1, res2 = ngx.location.capture_multi( {
                            {"/sum", {args={a=3, b=8}, method = ngx.HTTP_POST, body = 'c=3&d=4'}},
                            {"/subduction", {args={a=3, b=8}}}
                        })
            ngx.say("status:", res1.status, " response:", res1.body)
            ngx.say("status:", res2.status, " response:", res2.body)
            ngx.say("time used:", ngx.now() - start_time)
        }
    }

    location = /app/test_queue {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1 = ngx.location.capture_multi( {
                            {"/sum", {args={a=3, b=8}}}
                        })
            local res2 = ngx.location.capture_multi( {
                            {"/subduction", {args={a=3, b=8}}}
                        })
            ngx.say("status:", res1.status, " response:", res1.body)
            ngx.say("status:", res2.status, " response:", res2.body)
            ngx.say("time used:", ngx.now() - start_time)
        }
    }
    
    location = /foo {
    content_by_lua_block {
        ngx.say([[I am foo]])
    }
    }
    # 通过浏览器重定向打开
    location = /test_redirect {
    rewrite_by_lua_block {
        return ngx.redirect('/foo');
    }
    }
    
    location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
    set $image_name $1; #获取正则表达式中提取的文件名称
    content_by_lua_block {
            ngx.exec("/download_internal/images/".. ngx.var.image_name .. ".jpg"); --跳转不返回
            ngx.say(ngx.var.image_name) --这句话不会执行
        }
    }

    location /download_internal {
        internal;
        # 这里还可以有其他统一的 download 下载设置，例如限速等
        #alias ../download;
        content_by_lua_block {
            ngx.say('hello download_internal')
        }
    }
    
    # 静态文件
    location / {
    allow 127.0.0.1;
    deny all;
   
     access_by_lua_block {
                ngx.var.limit_rate = 1000
            }
        root /home/lishy/Downloads/;
        
        index test_vmtar.gz VMwareTools-10.0.0-2977863.tar.gz;
    }
    location /vm_test.tar {
    # 下载 /home/lishy/Downloads/vm_test.tar 文件
     access_by_lua_block {
                ngx.var.limit_rate = 1000
            }
        root /home/lishy/Downloads/;
    }
    #首先 ngx.ctx 是一个表，所以我们可以对他添加、修改。它用来存储基于请求的 Lua 环境数据，其生存周期与当前请求相同 (类似 Nginx 变量)。
    #每个请求，包括子请求，都有一份自己的 ngx.ctx 表
    # ngx.ctx 表查询需要相对昂贵的元方法调用，这比通过用户自己的函数参数直接传递基于请求的数据要慢得多。
    #所以不要为了节约用户函数参数而滥用此 API，因为它可能对性能有明显影响。
    location /test_share {
     rewrite_by_lua_block {
         ngx.ctx.foo = 76
     }
     access_by_lua_block {
         ngx.ctx.foo = ngx.ctx.foo + 3
     }
     content_by_lua_block {
         ngx.say(ngx.ctx.foo)
     }
 }
  location /sub {
     content_by_lua_block {
         ngx.say("sub pre: ", ngx.ctx.blah)
         ngx.ctx.blah = 32
         ngx.say("sub post: ", ngx.ctx.blah)
     }
 }

 location /main {
     content_by_lua_block {
         ngx.ctx.blah = 73
         ngx.say("main pre: ", ngx.ctx.blah)
         local res = ngx.location.capture("/sub")
         ngx.print(res.body)
         ngx.say("main post: ", ngx.ctx.blah)
     }
 }
}
